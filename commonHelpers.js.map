{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst dateTimePicker = document.querySelector('#datetime-picker');\nconst btnStart = document.querySelector('[data-start]');\nbtnStart.disabled = true;\nlet userSelectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0].getTime();\n\n    if (selectedDate < Date.now()) {\n      iziToast.error({\n        title: 'Error',\n        position: 'topCenter',\n        message: 'Please choose a date in the future',\n      });\n      btnStart.disabled = true;\n    }\n    else {\n      btnStart.disabled = false;\n      userSelectedDate = selectedDate;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nbtnStart.addEventListener('click', startTimer);\n\nfunction startTimer() {\n  const startTime = userSelectedDate;\n  const interval = setInterval(() => {\n    const currentTime = Date.now();\n    const deltaTime = startTime - currentTime;\n\n    if (deltaTime <= 0) {\n      clearInterval(interval);\n    }\n    else {\n      const { days, hours, minutes, seconds } = convertMs(deltaTime);\n      document.querySelector('[data-days]').textContent = `${days}`;\n      document.querySelector('[data-hours]').textContent = `${hours}`;\n      document.querySelector('[data-minutes]').textContent = `${minutes}`;\n      document.querySelector('[data-seconds]').textContent = `${seconds}`;\n    }\n    document.getElementById('datetime-picker').disabled = true;\n    btnStart.disabled = true;\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  const days = addLeadingZero(Math.floor(ms / day));\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  const seconds = addLeadingZero(\n    Math.floor((((ms % day) % hour) % minute) / second)\n  );\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["dateTimePicker","btnStart","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","startTimer","startTime","interval","currentTime","deltaTime","days","hours","minutes","seconds","convertMs","ms","addLeadingZero","value"],"mappings":"2GAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,cAAc,EACtDA,EAAS,SAAW,GACpB,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,GAAG,QAAO,EAEzCC,EAAe,KAAK,OACtBC,EAAS,MAAM,CACb,MAAO,QACP,SAAU,YACV,QAAS,oCACjB,CAAO,EACDL,EAAS,SAAW,KAGpBA,EAAS,SAAW,GACpBC,EAAmBG,EAEtB,CACH,EAEAE,EAAUP,EAAgBG,CAAO,EAEjCF,EAAS,iBAAiB,QAASO,CAAU,EAE7C,SAASA,GAAa,CACpB,MAAMC,EAAYP,EACZQ,EAAW,YAAY,IAAM,CACjC,MAAMC,EAAc,KAAK,MACnBC,EAAYH,EAAYE,EAE9B,GAAIC,GAAa,EACf,cAAcF,CAAQ,MAEnB,CACH,KAAM,CAAE,KAAAG,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAS,EAC7D,SAAS,cAAc,aAAa,EAAE,YAAc,GAAGC,IACvD,SAAS,cAAc,cAAc,EAAE,YAAc,GAAGC,IACxD,SAAS,cAAc,gBAAgB,EAAE,YAAc,GAAGC,IAC1D,SAAS,cAAc,gBAAgB,EAAE,YAAc,GAAGC,GAC3D,CACD,SAAS,eAAe,iBAAiB,EAAE,SAAW,GACtDf,EAAS,SAAW,EACrB,EAAE,GAAI,CACT,CAEA,SAASgB,EAAUC,EAAI,CAKrB,MAAML,EAAOM,EAAe,KAAK,MAAMD,EAAK,KAAG,CAAC,EAC1CJ,EAAQK,EAAe,KAAK,MAAOD,EAAK,MAAO,IAAI,CAAC,EACpDH,EAAUI,EAAe,KAAK,MAAQD,EAAK,MAAO,KAAQ,GAAM,CAAC,EACjEF,EAAUG,EACd,KAAK,MAASD,EAAK,MAAO,KAAQ,IAAU,GAAM,CACtD,EAEE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASG,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}